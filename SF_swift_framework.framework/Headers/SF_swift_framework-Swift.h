// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import CoreData;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SF_swift_framework",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Abstract implementation of { ContentSource} interface. This class has
/// implementation of all the write operations defined in contract
/// { ContentSource}
SWIFT_CLASS("_TtC18SF_swift_framework21AbstractContentSource")
@interface AbstractContentSource : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BUFFER_SIZE;)
+ (NSInteger)BUFFER_SIZE SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getLength SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SF_swift_framework23AbstractPacketForwarder")
@interface AbstractPacketForwarder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class Element;

SWIFT_CLASS("_TtC18SF_swift_framework10XMPPPacket")
@interface XMPPPacket : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Null_unspecified)getBytes SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasMime SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework9AckPacket")
@interface AckPacket : XMPPPacket
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns handledPacketCount:(NSInteger)handledPacketCount OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (void)setHandledPacketCountWithHandledPacketCount:(NSInteger)handledPacketCount;
- (NSString * _Nonnull)xml SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework16AckRequestPacket")
@interface AckRequestPacket : XMPPPacket
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
@end

@class XMPPStreamManager;

/// offers convinience methods to send Application
/// requests and receive response. It allows to send requests on persistent
/// connection as well as on transient connection.
/// <p>
/// In messaging mode also, application can take advantage
/// </p>
SWIFT_CLASS("_TtC18SF_swift_framework18ApplicationManager")
@interface ApplicationManager : AbstractPacketForwarder
- (nonnull instancetype)initWithStreamMgr:(XMPPStreamManager * _Nonnull)streamMgr OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Base class for all the  ApplicationRequest and  ApplicationResponse implementations
/// in server. This is used only in the context of an application.
SWIFT_CLASS("_TtC18SF_swift_framework18ApplicationMessage")
@interface ApplicationMessage : NSObject
- (BOOL)hasMime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithId:(NSString * _Null_unspecified)id;
- (nonnull instancetype)initWithId:(NSString * _Null_unspecified)id headers:(NSDictionary<NSString *, NSObject *> * _Null_unspecified)headers;
- (NSString * _Null_unspecified)getId SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSObject *> * _Null_unspecified)getHeaders SWIFT_WARN_UNUSED_RESULT;
- (void)setHeadersWithHeaders:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers;
- (NSObject * _Null_unspecified)getHeaderWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)addHeaderWithKey:(NSString * _Nonnull)key value:(NSObject * _Nonnull)value;
- (NSArray<NSNumber *> * _Null_unspecified)getMimeBoundary SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getContentLength SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework9AsyncPush")
@interface AsyncPush : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull NAMESPACE;
- (nullable instancetype)initWithData:(NSString * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHeaders:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHeaders:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers hasPiggyback:(BOOL)hasPiggyback OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, NSObject *> * _Null_unspecified)getHeaders SWIFT_WARN_UNUSED_RESULT;
- (void)setHeadersWithHeaders:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers;
- (BOOL)isHasPiggyback SWIFT_WARN_UNUSED_RESULT;
- (void)setHasPiggybackWithHasPiggyback:(BOOL)hasPiggyback;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Null_unspecified)getMimeBoundary SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasMime SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework21AsyncPushNotification")
@interface AsyncPushNotification : ApplicationMessage
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHeaders:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id headers:(NSDictionary<NSString *, NSObject *> * _Null_unspecified)headers;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getEndpoint SWIFT_WARN_UNUSED_RESULT;
@end


/// A { ContentSource} with Byte array as source of the content bytes.
SWIFT_CLASS("_TtC18SF_swift_framework22ByteArrayContentSource")
@interface ByteArrayContentSource : AbstractContentSource
- (nonnull instancetype)initWithLength:(NSInteger)length OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithContent:(NSArray<NSNumber *> * _Nonnull)content OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)getLength SWIFT_WARN_UNUSED_RESULT;
/// Add content to this {@link ByteArrayContentSource}
/// @param arr array oof content
/// @param offset starting index
/// @param length number of bytes to be added
/// @return true if the content was added to this {@link ContentSource};
/// false if the internal array didnt have enough space
- (BOOL)addContentWithArr:(NSArray<NSNumber *> * _Nonnull)arr offset:(NSInteger)offset length:(NSInteger)length SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Represents text node in xml DOM
SWIFT_CLASS("_TtC18SF_swift_framework4Text")
@interface Text : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getText SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)children SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringify SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringifyChildren SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)clone SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)val SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents CDATA section in XML DOM. Currently {@link SwiftParser} does not
/// support it.
SWIFT_CLASS("_TtC18SF_swift_framework12CDataSection")
@interface CDataSection : Text
- (nonnull instancetype)initWithCdata:(NSString * _Nonnull)cdata OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getCData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringify SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)children SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringifyChildren SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)val SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)clone SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18SF_swift_framework14CMAcknowledged")
@interface CMAcknowledged : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework11CMDisplayed")
@interface CMDisplayed : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework10CMMarkable")
@interface CMMarkable : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework10CMReceived")
@interface CMReceived : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework9CSNActive")
@interface CSNActive : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework12CSNComposing")
@interface CSNComposing : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework7CSNGone")
@interface CSNGone : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework11CSNInactive")
@interface CSNInactive : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework9CSNPaused")
@interface CSNPaused : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework9Challenge")
@interface Challenge : XMPPPacket
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Nonnull)getChallengeData SWIFT_WARN_UNUSED_RESULT;
- (void)setChallengeDataWithChallengeData:(NSString * _Nonnull)challengeData;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("ChatArchive")
@interface ChatArchive : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface ChatArchive (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic, copy) NSString * _Nullable content;
@property (nonatomic, copy) NSString * _Nullable create_time;
@property (nonatomic, copy) NSString * _Nullable jid;
@property (nonatomic, copy) NSString * _Nullable uuid;
@end

@class JID;
@class Message;
@class NSInputStream;

/// { ChatManager} manages user conversations. { ChatManager} uses
/// { XMPPStreamManager} to manage xmpp stream with remote server. It
/// is important to note that a { XMPPStreamManager} can manage a single
/// stream at a time.
/// <p>
/// There is no synchronous interface available for { ChatManager} as
/// messaging services are inherently asynchronous.
/// </p>
SWIFT_CLASS("_TtC18SF_swift_framework11ChatManager")
@interface ChatManager : AbstractPacketForwarder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithStreamManager:(XMPPStreamManager * _Nonnull)streamManager OBJC_DESIGNATED_INITIALIZER;
/// Convinience method to send a text message to a {@link JID}. A
/// {@link Message} packet is created with the given text and sent to
/// {@link XMPPStreamManager} which writes it on the underlying connection.
/// @param text
/// raw text to be sent to server within a message packet
/// @param to
/// receiver {@link JID}
- (void)sayWithMessageId:(NSString * _Nonnull)messageId text:(NSString * _Nonnull)text to:(JID * _Nonnull)to success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// A {@link Message} packet is created with the given text and sent to
/// {@link XMPPStreamManager} which writes it on the underlying connection. A
/// true value for flag ‘isGroup’ indicates that messages is intended to be
/// sent to a group.
/// @param text
/// raw text to be sent to server within a message packet
/// @param to
/// receiver {@link JID}
/// @param isGroup
/// true if messages being sent to a group’ otherwise false
- (void)sayWithMessageId:(NSString * _Nonnull)messageId text:(NSString * _Nonnull)text to:(JID * _Nonnull)to isGroup:(BOOL)isGroup success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// A { Message} packet is created with the given text and sent to
/// { XMPPStreamManager} which writes it on the underlying connection. A
/// true value for flag ‘isGroup’ indicates that messages is intended to be
/// sent to a group.
/// @param msg
/// raw text to be sent to server within a message packet
/// @param to
/// receiver { JID}
/// @param isGroup
/// true if messages being sent to a group’ otherwise false
/// @param isMarkable
/// true for getting delivery and read receipt.
- (void)sayWithMessageId:(NSString * _Nonnull)messageId text:(NSString * _Nonnull)text to:(JID * _Nonnull)to isGroup:(BOOL)isGroup isMarkable:(BOOL)isMarkable success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)sayWithConversationId:(NSString * _Null_unspecified)conversationId messageId:(NSString * _Nonnull)messageId text:(NSString * _Nonnull)text to:(JID * _Nonnull)to isGroup:(BOOL)isGroup isMarkable:(BOOL)isMarkable success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// A { Message} packet is created with the given text and sent to
/// { XMPPStreamManager} which writes it on the underlying connection. A
/// true value for flag ‘isGroup’ indicates that messages is intended to be
/// sent to a group.And this * message is intended to get delivery and read
/// receipt according to XEP-0333(Chat-Markers).
/// @param text
/// raw text to be sent to server within a message packet
/// @param to
/// receiver { JID}
/// @param isGroup
/// true if messages being sent to a group’ otherwise false
- (void)sendMarkableMessageWithCSNWithMessageId:(NSString * _Nonnull)messageId text:(NSString * _Nonnull)text to:(JID * _Nonnull)to isGroup:(BOOL)isGroup success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)sendMarkableMessageWithCSNWithConversationId:(NSString * _Null_unspecified)conversationId messageId:(NSString * _Nonnull)messageId text:(NSString * _Nonnull)text to:(JID * _Nonnull)to isGroup:(BOOL)isGroup success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// @param messageId
/// @param text
/// @param to
/// @param isGroup
/// @param isMarkable is Need Chat Markers (XEP-0333)
/// @param isCSN is support Chat State Notification (XEP-0085)
/// @return
- (BOOL)sendTextMessageWithConversationId:(NSString * _Null_unspecified)conversationId messageId:(NSString * _Nonnull)messageId text:(NSString * _Nonnull)text to:(JID * _Nonnull)to isGroup:(BOOL)isGroup isMarkable:(BOOL)isMarkable isCSNSupported:(BOOL)isCSNSupported SWIFT_WARN_UNUSED_RESULT;
/// Sending message received receipt to sender explained in XEP-0333(Chat Markers)
/// @param messageId
/// received message id
/// @param to
/// message sender { JID}
- (BOOL)sendMsgCMReceivedReceiptWithMessageId:(NSString * _Nonnull)messageId to:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
/// Sending message displayed receipt to sender explained in XEP-0333(Chat Markers)
/// @param messageId
/// received message id
/// @param to
/// message sender { JID}
- (BOOL)sendMsgCMDisplayedReceiptWithMessageId:(NSString * _Nonnull)messageId to:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
/// Sending message acknowledged receipt to sender explained in XEP-0333(Chat Markers)
/// @param messageId
/// received message id
/// @param to
/// message sender { JID}
- (BOOL)sendMsgCMAcknowledgedReceiptWithMessageId:(NSString * _Nonnull)messageId to:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
/// Sending INACTIVE chat state notification explained in XEP-0085(Chat State Notifications)
/// @param to
/// contact { JID}
- (BOOL)sendInactiveCSNTo:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
/// Sending COMPOSING chat state notification explained in XEP-0085(Chat State Notifications)
/// @param to
/// contact { JID}
- (BOOL)sendComposingCSNTo:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
/// Sending PAUSED chat state notification explained in XEP-0085(Chat State Notifications)
/// @param to
/// contact { JID}
- (BOOL)sendPausedCSNTo:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
/// Sending GONE chat state notification explained in XEP-0085(Chat State Notifications)
/// @param to
/// contact {@link JID}
- (BOOL)sendGoneCSNTo:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
/// Sends message to { XMPPStreamManager} which writes it on the
/// underlying connection. If the { XMPPStreamManager} is offline (not
/// ready to send messages), the messages is added to queue which will be
/// drained once the { XMPPStreamManager} is online.
/// @param msg
/// packet to be sent
/// @throws NetworkException
/// if the connection encounters IO errors
/// @throws ProtocolException
/// if the packet is not as per protocol rules
- (BOOL)sendWithMsg:(Message * _Nonnull)msg SWIFT_WARN_UNUSED_RESULT;
/// Write a raw String to server. This method is useful for testing purpose
/// only. Sending anything which violates XMPP protocol sementics will result
/// in stream close from server.
/// @param msg
/// @throws NetworkException
/// @throws UnsupportedEncodingException
- (BOOL)sendRawMsgWithMsg:(NSString * _Nonnull)msg error:(NSError * _Nullable * _Nullable)error;
/// Send media content to another user. The media is sent on a transient
/// connection. Each media sent to server is assigned an unique id; this
/// unique id is also sent to destination user inside a {@link Message}
/// packet. The destination user SDK makes a media request to server with
/// this media id.
/// @param is
/// @param to
/// @param callback
- (void)sendMediaWithMessageId:(NSString * _Nonnull)messageId ins:(NSInputStream * _Nonnull)ins to:(JID * _Nonnull)to isGroup:(BOOL)isGroup success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)sendMediaWithMessageId:(NSString * _Nonnull)messageId bytes:(NSArray<NSNumber *> * _Nonnull)bytes to:(JID * _Nonnull)to isGroup:(BOOL)isGroup success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// Send media content to another user. The media is sent on a transient
/// connection. Each media sent to server is assigned an unique id; this
/// unique id is also sent to destination user inside a { Message}
/// packet. The destination user SDK makes a media request to server with
/// this media id.
/// @param filePath
/// @param to
/// @param callback
- (void)sendMediaWithMessageId:(NSString * _Nonnull)messageId filePath:(NSString * _Nonnull)filePath to:(JID * _Nonnull)to isGroup:(BOOL)isGroup success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// Convenience method to send mediaId to a { JID}. A { Message}
/// packet is created with the given mediaId and sent to
/// { XMPPStreamManager} which writes it on the underlying connection.
/// @param msg
/// raw text to be sent to server within a message packet
/// @param to
/// receiver { JID}
- (BOOL)sendMediaMessageWithMessageId:(NSString * _Nonnull)messageId mediaId:(NSString * _Nonnull)mediaId toJID:(JID * _Nonnull)toJID SWIFT_WARN_UNUSED_RESULT;
/// A { Message} packet is created with the given mediaId and sent to
/// { XMPPStreamManager} which writes it on the underlying connection. A
/// true value for flag ‘isGroup’ indicates that messages is intended to be
/// sent to a group.
/// @param msg
/// raw text to be sent to server within a message packet
/// @param to
/// receiver { JID}
/// @param isGroup
/// true if messages being sent to a group’ otherwise false
- (BOOL)sendMediaMessageWithMessageId:(NSString * _Nonnull)messageId mediaId:(NSString * _Nonnull)mediaId toJID:(JID * _Nonnull)toJID isGroup:(BOOL)isGroup SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a media from server. Typically, client application will invoke
/// this method once it receives a media id inside a { Message} from a
/// {@link JID}. Upon receiving the media id, client may request media from
/// server and will supply the media id.
/// <p>
/// As media downloads are generally time consuming, the operation is
/// executed asynchronously. The { Callback} instance suppllied in
/// arguments will be invoked once media is received from the server.
/// </p>
/// @param mediaId
/// @param callback
- (void)retrieveMediaWithMediaId:(NSString * _Nonnull)mediaId success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)saveMsgInDatabaseWithConversationId:(NSString * _Null_unspecified)conversationId messageId:(NSString * _Nonnull)messageId content:(NSString * _Nonnull)content type:(NSString * _Nonnull)type jid:(NSString * _Nonnull)jid isGroup:(BOOL)isGroup isMarkable:(BOOL)isMarkable success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
@end

@class ChatRoomMember;

SWIFT_CLASS("_TtC18SF_swift_framework8ChatRoom")
@interface ChatRoom : NSObject
- (nonnull instancetype)initWithRoomJID:(JID * _Nonnull)roomJID name:(NSString * _Null_unspecified)name subject:(NSString * _Null_unspecified)subject;
- (nonnull instancetype)initWithRoomJID:(JID * _Nonnull)roomJID name:(NSString * _Nonnull)name subject:(NSString * _Null_unspecified)subject containMember:(BOOL)containMember OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRoomJID:(JID * _Nonnull)roomJID name:(NSString * _Nonnull)name subject:(NSString * _Null_unspecified)subject status:(BOOL)status OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)getName SWIFT_WARN_UNUSED_RESULT;
- (void)setNameWithName:(NSString * _Nonnull)name;
- (NSString * _Null_unspecified)getSubject SWIFT_WARN_UNUSED_RESULT;
- (void)setSubjectWithSubject:(NSString * _Nonnull)subject;
- (JID * _Null_unspecified)getRoomJID SWIFT_WARN_UNUSED_RESULT;
- (void)setRoomJIDWithRoomJID:(JID * _Nonnull)roomJID;
- (NSSet<ChatRoomMember *> * _Null_unspecified)getMembers SWIFT_WARN_UNUSED_RESULT;
- (void)setMembersWithMembers:(NSSet<ChatRoomMember *> * _Nonnull)members;
- (void)setContainMembersWithContainMember:(BOOL)containMember;
- (void)setStatusWithStatus:(BOOL)status;
- (ChatRoomMember * _Null_unspecified)getMemberWithUserJID:(JID * _Nonnull)userJID SWIFT_WARN_UNUSED_RESULT;
- (ChatRoomMember * _Null_unspecified)getMemberByNickNameWithNickName:(NSString * _Nonnull)nickName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)doesNickNameConflictWithMember:(ChatRoomMember * _Nonnull)member SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ChatRoomMembers")
@interface ChatRoomMembers : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class Rosters;

@interface ChatRoomMembers (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic, copy) NSString * _Nullable affilation;
@property (nonatomic, copy) NSString * _Nullable jid;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, copy) NSString * _Nullable room_jid;
@property (nonatomic, copy) NSString * _Nullable uuid;
@property (nonatomic, strong) Rosters * _Nullable chatRoom;
@end

@class Event;

SWIFT_CLASS("_TtC18SF_swift_framework22ChatRoomReceiveHandler")
@interface ChatRoomReceiveHandler : NSObject
- (void)handleWithE:(Event * _Nonnull)e;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ChatStore")
@interface ChatStore : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class MediaStore;
@class PollStore;

@interface ChatStore (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic, copy) NSString * _Nullable chatline;
@property (nonatomic, copy) NSString * _Nullable chatline_type;
@property (nonatomic) int64_t create_time;
@property (nonatomic) int16_t delivery_status;
@property (nonatomic, copy) NSString * _Nullable direction;
@property (nonatomic) BOOL is_displayed;
@property (nonatomic) BOOL isMarkable;
@property (nonatomic, copy) NSString * _Nullable message_id;
@property (nonatomic, copy) NSString * _Nullable peer_jid;
@property (nonatomic, copy) NSString * _Nullable peer_res;
@property (nonatomic, copy) NSString * _Nullable threadId;
@property (nonatomic) double timeInMilles;
@property (nonatomic, strong) MediaStore * _Nullable media;
@property (nonatomic, strong) PollStore * _Nullable poll;
@end


SWIFT_CLASS_NAMED("Conversation")
@interface Conversation : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface Conversation (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic, copy) NSString * _Nullable conversation_id;
@property (nonatomic) BOOL is_group;
@property (nonatomic, copy) NSString * _Nullable last_chatline;
@property (nonatomic, copy) NSString * _Nullable last_chatline_type;
@property (nonatomic, copy) NSString * _Nullable last_message_direction;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable peer_jid;
@property (nonatomic) int64_t unread_chatline_count;
@property (nonatomic) int64_t update_time;
@end


/// This extremely simple implementation for XML element. It does not support
/// many features offered in XML specification for an implement. However it is
/// good enough to handle XMPP Stanza elements.
/// Currently this does not support  CDataSection
SWIFT_CLASS("_TtC18SF_swift_framework7Element")
@interface Element : NSObject
/// Performs a deep copy on the supplied element and populates instance
/// variable of this instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a blank element with the name given
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// Performs a deep copy on the supplied element and populates instance
/// variable of this instance.
- (nonnull instancetype)initWithElement:(Element * _Nonnull)element OBJC_DESIGNATED_INITIALIZER;
/// Creates a simple element with given and name and text value
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name text:(NSString * _Null_unspecified)text OBJC_DESIGNATED_INITIALIZER;
- (Element * _Null_unspecified)getChildStaticStrWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (Element * _Null_unspecified)getChildWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (Element * _Null_unspecified)findChildWithElemPath:(NSArray<NSString *> * _Nonnull)elemPath SWIFT_WARN_UNUSED_RESULT;
- (Element * _Null_unspecified)getChildWithName:(NSString * _Nonnull)name child_xmlns:(NSString * _Null_unspecified)child_xmlns SWIFT_WARN_UNUSED_RESULT;
/// Returns value for the supplied attribute. As attributes are stored in a
/// list, it’s a plain linear probe. We may change the data structure to a
/// { Map} if this degrades the performance. The assumption is that XMPP
/// packets do not have too many attributes.
- (NSString * _Null_unspecified)getAttributeWithAttName:(NSString * _Nonnull)attName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<Element *> * _Null_unspecified)getChildren SWIFT_WARN_UNUSED_RESULT;
- (NSArray<Element *> * _Null_unspecified)getChildrenWithElementPath:(NSArray<NSString *> * _Nonnull)elementPath SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getXMLNS SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getXMLNSWithElementPath:(NSArray<NSString *> * _Nonnull)elementPath SWIFT_WARN_UNUSED_RESULT;
- (void)removeAttributeWithKey:(NSString * _Nonnull)key;
- (NSString * _Nonnull)getChildAttributeWithChildName:(NSString * _Nonnull)childName attName:(NSString * _Nonnull)attName SWIFT_WARN_UNUSED_RESULT;
/// Returns attributes for this element. Any change in the returned
/// attributes will reflect back in this element attribute list
- (NSDictionary<NSString *, NSString *> * _Nonnull)getAttributes SWIFT_WARN_UNUSED_RESULT;
/// Adds text node in the children of this element. This operation will
/// remove exiting CDataSection and  Text nodes from the
/// children
- (void)addTextWithText:(NSString * _Nonnull)text;
/// adds  Text node to this element children. If
/// removeExisting flag is on, exisitng  CDataSection and
/// Text nodes will be removed
/// @param text
/// @param removeExiting
- (void)addTextWithText:(NSString * _Nonnull)text removeExiting:(BOOL)removeExiting;
- (void)addAttributeWithAttName:(NSString * _Nonnull)attName attValue:(NSString * _Nonnull)attValue;
- (void)addAttributesWithAttrs:(NSDictionary<NSString *, NSString *> * _Null_unspecified)attrs;
- (void)addChildrenWithChildren:(NSArray<Element *> * _Null_unspecified)children;
/// Removes  Text nodes and CDataSection nodes from the
/// children of this element
- (void)removeText;
/// Adds  CDataSection node in the children of this element
- (void)addCDATASectionWithCdata:(NSString * _Nonnull)cdata;
- (void)setDefXMLNSWithNs:(NSString * _Nonnull)ns;
- (void)setNameWithArgName:(NSString * _Nonnull)argName;
- (void)setXMLNSWithNs:(NSString * _Null_unspecified)ns;
- (BOOL)removeChildWithChild:(Element * _Nonnull)child SWIFT_WARN_UNUSED_RESULT;
- (void)setAttributeWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringify SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringifyChildren SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)clone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)equalsWithObj:(id _Null_unspecified)obj SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)children SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)val SWIFT_WARN_UNUSED_RESULT;
- (void)forEachChildWithAccept:(SWIFT_NOESCAPE void (^ _Nonnull)(Element * _Nonnull))accept;
@end


/// Event represents SDK generated events. These events are generally
/// fired through EventBus to all the subscribed EventListener
SWIFT_CLASS("_TtC18SF_swift_framework5Event")
@interface Event : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Null_unspecified)getSource SWIFT_WARN_UNUSED_RESULT;
- (NSCalendar * _Nonnull)getCreateTime SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework12FailedPacket")
@interface FailedPacket : XMPPPacket
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Nonnull)getReason SWIFT_WARN_UNUSED_RESULT;
- (void)setReasonWithReason:(NSString * _Nonnull)reason;
- (NSString * _Nonnull)xml SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework7Failure")
@interface Failure : XMPPPacket
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Nonnull)getReason SWIFT_WARN_UNUSED_RESULT;
- (void)setReasonWithReason:(NSString * _Nonnull)reason;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
@end


/// { ContentSource} with { File} as underlying byte source.
SWIFT_CLASS("_TtC18SF_swift_framework17FileContentSource")
@interface FileContentSource : AbstractContentSource
- (nonnull instancetype)initWithFilePath:(NSString * _Nonnull)filePath;
- (NSInteger)getLength SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SF_swift_framework6Stanza")
@interface Stanza : XMPPPacket
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)getId SWIFT_WARN_UNUSED_RESULT;
- (void)setIdWithId:(NSString * _Nonnull)id;
- (JID * _Null_unspecified)getFrom SWIFT_WARN_UNUSED_RESULT;
- (void)setFromFrom:(JID * _Nonnull)from;
- (JID * _Null_unspecified)getTo SWIFT_WARN_UNUSED_RESULT;
- (void)setToTo:(JID * _Nonnull)to;
- (NSString * _Null_unspecified)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Null_unspecified)getCreateTime SWIFT_WARN_UNUSED_RESULT;
- (void)setCreateTimeWithCreateTime:(NSString * _Nonnull)createTime;
@end


SWIFT_CLASS("_TtC18SF_swift_framework2IQ")
@interface IQ : Stanza
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)prepareIqStartTagWithSb:(NSString * _Nonnull)sb SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id SWIFT_UNAVAILABLE;
@end


/// A {@link ContentSource} implementation with {@link InputStream} as underlying
/// byte source.
SWIFT_CLASS("_TtC18SF_swift_framework24InputStreamContentSource")
@interface InputStreamContentSource : AbstractContentSource
- (nonnull instancetype)initWithIns:(NSInputStream * _Nonnull)ins OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)getLength SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Represents Jabber ID
SWIFT_CLASS("_TtC18SF_swift_framework3JID")
@interface JID : NSObject
/// Parses the supplied JabberId for node, domain and resource fields
/// @param jid
/// @throws InvalidJabberId if the jid supplied is malformed
- (nullable instancetype)initWithJid:(NSString * _Null_unspecified)jid error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNode:(NSString * _Nonnull)node domain:(NSString * _Nonnull)domain OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNode:(NSString * _Nonnull)node domain:(NSString * _Nonnull)domain resource:(NSString * _Nonnull)resource OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBareJID:(JID * _Nonnull)bareJID resource:(NSString * _Nonnull)resource OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)getNode SWIFT_WARN_UNUSED_RESULT;
- (void)setNodeWithNode:(NSString * _Nonnull)node;
- (NSString * _Null_unspecified)getDomain SWIFT_WARN_UNUSED_RESULT;
- (void)setDomainWithDomain:(NSString * _Nonnull)domain;
- (NSString * _Null_unspecified)getResource SWIFT_WARN_UNUSED_RESULT;
- (void)setResourceWithResource:(NSString * _Nonnull)resource;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getBareJID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getFullJID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("MediaStore")
@interface MediaStore : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface MediaStore (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic, copy) NSString * _Nullable mediaId;
@property (nonatomic, copy) NSString * _Nullable mediaPath;
@property (nonatomic, copy) NSString * _Nullable mediaType;
@property (nonatomic) int64_t size;
@property (nonatomic, copy) NSString * _Nullable thumbPath;
@property (nonatomic, strong) ChatStore * _Nullable chat;
@end


SWIFT_CLASS("_TtC18SF_swift_framework7Message")
@interface Message : Stanza
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull POLL_TYPE;)
+ (NSString * _Nonnull)POLL_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull QUESTION;)
+ (NSString * _Nonnull)QUESTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OPTION1;)
+ (NSString * _Nonnull)OPTION1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OPTION2;)
+ (NSString * _Nonnull)OPTION2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OPTION3;)
+ (NSString * _Nonnull)OPTION3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OPTION4;)
+ (NSString * _Nonnull)OPTION4 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CORRECT_ANSWER;)
+ (NSString * _Nonnull)CORRECT_ANSWER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull START_TIME;)
+ (NSString * _Nonnull)START_TIME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EXPIRY_TIME;)
+ (NSString * _Nonnull)EXPIRY_TIME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RESPONSE_TYPE;)
+ (NSString * _Nonnull)RESPONSE_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONTENT_TYPE;)
+ (NSString * _Nonnull)CONTENT_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull THUMB;)
+ (NSString * _Nonnull)THUMB SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EMPTY;)
+ (NSString * _Nonnull)EMPTY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SPACE;)
+ (NSString * _Nonnull)SPACE SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessageId:(NSString * _Nonnull)messageId OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id SWIFT_UNAVAILABLE;
@end


/// Represents body element within a message packet
SWIFT_CLASS("_TtC18SF_swift_framework11MessageBody")
@interface MessageBody : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithContent:(NSString * _Nonnull)content OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework12MessageDelay")
@interface MessageDelay : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TIME_FORMAT;)
+ (NSString * _Nonnull)TIME_FORMAT SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithXmlns:(NSString * _Nonnull)xmlns OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Nonnull)getFrom SWIFT_WARN_UNUSED_RESULT;
- (void)setFromFrom:(NSString * _Null_unspecified)from;
- (NSString * _Nonnull)getStamp SWIFT_WARN_UNUSED_RESULT;
- (void)setStampWithStamp:(NSString * _Nonnull)stamp;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework12MessageMedia")
@interface MessageMedia : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMediaId:(NSString * _Nonnull)mediaId OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)getMediaId SWIFT_WARN_UNUSED_RESULT;
- (void)setMediaIdWithMediaId:(NSString * _Nonnull)mediaId;
- (NSString * _Null_unspecified)getThumb SWIFT_WARN_UNUSED_RESULT;
- (void)setThumbWithThumb:(NSString * _Nonnull)thumb;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A { PacketCollector} implementation to receive inbound { Message}
/// packets from { abs.ixi.client.ChatManager} and store them in database.
SWIFT_CLASS("_TtC18SF_swift_framework15MessageReceiver")
@interface MessageReceiver : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MessageReceiver * _Nonnull shared;)
+ (MessageReceiver * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(MessageReceiver * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)handleWithE:(Event * _Nonnull)e;
@end


/// Represents subject within a message stanza
SWIFT_CLASS("_TtC18SF_swift_framework14MessageSubject")
@interface MessageSubject : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithContent:(NSString * _Nonnull)content OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework13MessageThread")
@interface MessageThread : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithThreadId:(NSString * _Nonnull)threadId OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getThreadId SWIFT_WARN_UNUSED_RESULT;
- (void)setThreadIdWithThreadId:(NSString * _Nonnull)threadId;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework11PollContent")
@interface PollContent : NSObject
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XML_ELM_NAME;)
+ (NSString * _Nonnull)XML_ELM_NAME SWIFT_WARN_UNUSED_RESULT;
- (int64_t)getPollId SWIFT_WARN_UNUSED_RESULT;
- (void)setPollIdWithPollId:(int64_t)pollId;
- (NSString * _Null_unspecified)getQuestion SWIFT_WARN_UNUSED_RESULT;
- (void)setQuestionWithQuestion:(NSString * _Nonnull)question;
- (NSString * _Null_unspecified)getOption1 SWIFT_WARN_UNUSED_RESULT;
- (void)setOption1WithOption1:(NSString * _Nonnull)option1;
- (NSString * _Null_unspecified)getOption2 SWIFT_WARN_UNUSED_RESULT;
- (void)setOption2WithOption2:(NSString * _Nonnull)option2;
- (NSString * _Null_unspecified)getOption3 SWIFT_WARN_UNUSED_RESULT;
- (void)setOption3WithOption3:(NSString * _Nonnull)option3;
- (NSString * _Null_unspecified)getOption4 SWIFT_WARN_UNUSED_RESULT;
- (void)setOption4WithOption4:(NSString * _Nonnull)option4;
- (NSString * _Null_unspecified)getCorrectAnswer SWIFT_WARN_UNUSED_RESULT;
- (void)setCorrectAnswerWithCorrectAnswer:(NSString * _Nonnull)correctAnswer;
- (void)setStartTimeWithStartTime:(int64_t)startTime;
- (void)setExpiryTimeWithExpiryTime:(int64_t)expiryTime;
- (BOOL)isMimeCarrier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("PollStore")
@interface PollStore : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface PollStore (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic, copy) NSString * _Nullable correct_answer;
@property (nonatomic) int64_t expiryTime;
@property (nonatomic, copy) NSString * _Nullable option1;
@property (nonatomic, copy) NSString * _Nullable option2;
@property (nonatomic, copy) NSString * _Nullable option3;
@property (nonatomic, copy) NSString * _Nullable option4;
@property (nonatomic, copy) NSString * _Nullable pollId;
@property (nonatomic, copy) NSString * _Nullable pollType;
@property (nonatomic, copy) NSString * _Nullable question;
@property (nonatomic) int64_t startTime;
@property (nonatomic, strong) ChatStore * _Nullable chat;
@end


SWIFT_CLASS("_TtC18SF_swift_framework8Presence")
@interface Presence : Stanza
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SHOW;)
+ (NSString * _Nonnull)SHOW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STATUS;)
+ (NSString * _Nonnull)STATUS SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)getMood SWIFT_WARN_UNUSED_RESULT;
- (void)setMoodWithMood:(NSString * _Nonnull)mood;
- (ChatRoom * _Null_unspecified)getChatRoom SWIFT_WARN_UNUSED_RESULT;
- (void)setChatRoomWithChatRoom:(ChatRoom * _Nonnull)chatRoom;
- (BOOL)isMuc SWIFT_WARN_UNUSED_RESULT;
- (void)setMucWithMuc:(BOOL)muc;
- (BOOL)isInitialPresence SWIFT_WARN_UNUSED_RESULT;
- (void)setInitialPresenceWithInitialPresence:(BOOL)initialPresence;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18SF_swift_framework15PresenceManager")
@interface PresenceManager : AbstractPacketForwarder
- (nonnull instancetype)initWithStreamManager:(XMPPStreamManager * _Nonnull)streamManager OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)sendInitialPresence SWIFT_WARN_UNUSED_RESULT;
- (BOOL)sendPresenceWithPresence:(Presence * _Nonnull)presence SWIFT_WARN_UNUSED_RESULT;
- (BOOL)subscribeTo:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
- (BOOL)unsbscribeTo:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
- (BOOL)broadcastPresence SWIFT_WARN_UNUSED_RESULT;
- (BOOL)unavailablePresence SWIFT_WARN_UNUSED_RESULT;
- (BOOL)unavailablePresenceWithMood:(NSString * _Nonnull)mood SWIFT_WARN_UNUSED_RESULT;
- (BOOL)sendPresenceTo:(JID * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
- (BOOL)sendPresenceTo:(JID * _Null_unspecified)to mood:(NSString * _Null_unspecified)mood SWIFT_WARN_UNUSED_RESULT;
@end


/// Here we collect presence which comes from server.
SWIFT_CLASS("_TtC18SF_swift_framework16PresenceReceiver")
@interface PresenceReceiver : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SF_swift_framework7Proceed")
@interface Proceed : XMPPPacket
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework12ResourceBind")
@interface ResourceBind : XMPPPacket
- (NSString * _Nonnull)xml SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SF_swift_framework19ResourceBindFeature")
@interface ResourceBindFeature : NSObject
- (nonnull instancetype)initWithElement:(Element * _Nonnull)element OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)getXmlns SWIFT_WARN_UNUSED_RESULT;
@end


/// Stringflow programming model is not synchronous in nature; It allows to
/// pipeline requests on same connection without waiting for response. While this
/// feature is called ‘Request Pipelining’, it complicates response correlation
/// in application layer. { ResponseCorrelator} comes to the rescue here and
/// correlates response to the requests for applications.
/// <p>
/// When a request is sent to the server, the request carries an id and server
/// response will also contain the same id which {@ ResponseCorrelator} uses
/// to correlate the response to the request.
/// </p>
SWIFT_CLASS("_TtC18SF_swift_framework18ResponseCorrelator")
@interface ResponseCorrelator : AbstractPacketForwarder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Correlates given request id with a response
/// @param id
/// @return
- (void)correlateWithId:(NSString * _Nonnull)id;
/// Generates a request id which is added response awaiting requests list
- (NSString * _Nonnull)getCorrelationId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework6Roster")
@interface Roster : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (NSInteger)getVersion SWIFT_WARN_UNUSED_RESULT;
- (void)setVersionWithVersion:(NSInteger)version;
@end


SWIFT_CLASS("_TtC18SF_swift_framework19RosterUpdateHandler")
@interface RosterUpdateHandler : NSObject
- (void)handleWithE:(Event * _Nonnull)event;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("Rosters")
@interface Rosters : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSSet;

@interface Rosters (SWIFT_EXTENSION(SF_swift_framework))
- (void)addMembersObject:(ChatRoomMembers * _Nonnull)value;
- (void)removeMembersObject:(ChatRoomMembers * _Nonnull)value;
- (void)addMembers:(NSSet * _Nonnull)values;
- (void)removeMembers:(NSSet * _Nonnull)values;
@end


@interface Rosters (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic) BOOL is_group;
@property (nonatomic, copy) NSString * _Nullable jid;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable room_subject;
@property (nonatomic, copy) NSString * _Nullable uuid;
@property (nonatomic, strong) NSSet * _Nullable members;
@end


SWIFT_CLASS("_TtC18SF_swift_framework8SASLAuth")
@interface SASLAuth : XMPPPacket
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18SF_swift_framework11SASLFeature")
@interface SASLFeature : NSObject
- (nonnull instancetype)initWithElement:(Element * _Nonnull)element OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)getXmlns SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

SWIFT_CLASS("_TtC18SF_swift_framework17SFCoreDataManager")
@interface SFCoreDataManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFCoreDataManager * _Nonnull sharedInstance;)
+ (SFCoreDataManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (NSManagedObjectContext * _Nonnull)getContext SWIFT_WARN_UNUSED_RESULT;
- (void)saveLoginDetailsWithLoginData:(NSDictionary<NSString *, id> * _Nonnull)loginData success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)saveRoasterWithRosterData:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)rosterData success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)saveChatHistoryWithChatData:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)chatData success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)saveActiveChatWithChatData:(NSDictionary<NSString *, id> * _Nonnull)chatData success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)saveUserPresenceWithPresenceData:(NSDictionary<NSString *, id> * _Nonnull)presenceData success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)saveChatStoreWithChatData:(NSDictionary<NSString *, id> * _Nonnull)chatData success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)getUndeliveredMessagesWithSuccess:(void (^ _Nonnull)(NSArray<ChatStore *> * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
- (void)deleteEntityFromDataBaseWithEntityName:(NSString * _Nonnull)entityName jid:(NSString * _Null_unspecified)jid success:(void (^ _Nonnull)(NSString * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (void)updateUnreadCountWithJid:(NSString * _Nonnull)jid unread_chatline_count:(int64_t)unread_chatline_count;
@end


SWIFT_CLASS("_TtC18SF_swift_framework12SFUserDetail")
@interface SFUserDetail : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SFUserDetail (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic, copy) NSString * _Nullable domain;
@property (nonatomic) BOOL login;
@property (nonatomic, copy) NSString * _Nullable password;
@property (nonatomic, copy) NSString * _Nullable user_name;
@property (nonatomic, copy) NSString * _Nullable userJid;
@end


SWIFT_CLASS("_TtC18SF_swift_framework8SMEnable")
@interface SMEnable : XMPPPacket
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SF_swift_framework15SMEnabledPacket")
@interface SMEnabledPacket : XMPPPacket
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isResume SWIFT_WARN_UNUSED_RESULT;
- (void)setResumeWithResume:(BOOL)resume;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Nonnull)getStreamId SWIFT_WARN_UNUSED_RESULT;
- (void)setStreamIdWithStreamId:(NSString * _Nonnull)streamId;
@end



SWIFT_CLASS("_TtC18SF_swift_framework8StartTLS")
@interface StartTLS : XMPPPacket
- (NSString * _Nonnull)xml SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SF_swift_framework19StreamFeaturePacket")
@interface StreamFeaturePacket : XMPPPacket
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework12StreamHeader")
@interface StreamHeader : XMPPPacket
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getStreamId SWIFT_WARN_UNUSED_RESULT;
- (void)setStreamIdWithStreamId:(NSString * _Nonnull)streamId;
- (JID * _Nonnull)getFrom SWIFT_WARN_UNUSED_RESULT;
- (void)setFromFrom:(JID * _Nonnull)from;
- (JID * _Nonnull)getTo SWIFT_WARN_UNUSED_RESULT;
- (void)setToTo:(JID * _Nonnull)to;
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (void)setVersionWithVersion:(NSString * _Nonnull)version;
- (NSString * _Nonnull)getLanguage SWIFT_WARN_UNUSED_RESULT;
- (void)setLanguageWithLanguage:(NSString * _Nonnull)language;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (BOOL)isCloseStream SWIFT_WARN_UNUSED_RESULT;
- (void)setCloseStreamWithCloseStream:(BOOL)closeStream;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework23StreamMenagementFeature")
@interface StreamMenagementFeature : NSObject
- (nonnull instancetype)initWithElement:(Element * _Nonnull)element OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Null_unspecified)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework16StreamNegotiator")
@interface StreamNegotiator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SF_swift_framework12StreamResume")
@interface StreamResume : XMPPPacket
- (nonnull instancetype)initWithStreamId:(NSString * _Nonnull)streamId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)xml SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18SF_swift_framework13StreamResumed")
@interface StreamResumed : XMPPPacket
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Nonnull)getStreamId SWIFT_WARN_UNUSED_RESULT;
- (void)setStreamIdWithStreamId:(NSString * _Nonnull)streamId;
- (void)setPrevHandledPacketCountWithPrevHandledPacketCount:(NSInteger)prevHandledPacketCount;
- (NSString * _Nonnull)xml SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework7Success")
@interface Success : XMPPPacket
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getXmlns SWIFT_WARN_UNUSED_RESULT;
- (void)setXmlnsWithXmlns:(NSString * _Nonnull)xmlns;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
@end


/// A event based parser with very limited capability. It can not handle all the
/// XML constructs correctly. It has been written keeping in mind that it will be
/// used only for XMPP packet parsing. Also, normal text and { CDataSection}
/// are handled the same way in the parser currently.
/// <p>
/// It can not handle comment blocks
/// </p>
SWIFT_CLASS("_TtC18SF_swift_framework11SwiftParser")
@interface SwiftParser : NSObject <NSXMLParserDelegate>
/// { SwiftParser} is to be used as singleton. Therefore, restricting
/// constructor access to package. Parser instance must be retrieved using
/// { XmlParserFactory}
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSStream;

/// Raw TCP connection from client to server. Represents physical connection
/// between server and client host. This is almost a proxy within application to
/// the underlying TCP socket connection.
/// <p>
/// The implementation is not fully thread-safe.
/// </p>
SWIFT_CLASS("_TtC18SF_swift_framework13TCPConnection")
@interface TCPConnection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (NSString * _Null_unspecified)getId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
- (void)setLastActivityWithLastActivity:(int64_t)lastActivity;
- (void)setIsConnectedWithIsConnect:(BOOL)isConnect;
- (double)getConnTimeout SWIFT_WARN_UNUSED_RESULT;
- (NSStream * _Null_unspecified)getInputStream SWIFT_WARN_UNUSED_RESULT;
- (NSStream * _Null_unspecified)getOutputStream SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getPort SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getHost SWIFT_WARN_UNUSED_RESULT;
/// Sets the connection timeout for this connection. It also changes the
/// {@link ConnectionConfig} onject held by this connection;
/// @param connTimeout
- (void)setConnTimeoutWithConnTimeout:(double)connTimeout;
- (BOOL)closeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)isConnectedWithVerify:(BOOL)verify SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework10TLSFeature")
@interface TLSFeature : NSObject
- (nonnull instancetype)initWithElement:(Element * _Nonnull)element OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isRequired SWIFT_WARN_UNUSED_RESULT;
- (void)setRequiredWithRequired:(BOOL)required;
- (NSString * _Null_unspecified)getXmlns SWIFT_WARN_UNUSED_RESULT;
@end



/// { UserManager} is the top level entity which has all the convinience
/// method required to add, retrieve and update user related data. Most of the
/// times, { UserManager} processes { IQ} packets. Primary
/// responsibility includes user login, user signup, user logout, roster
/// managerment and Chatroom/Group related APIs.
/// <p>
/// { UserManager} allows both asynchronous and synchronous invocation of
/// exposed APIs. Additionally, developer can supply a { Callback} instance
/// to be invoked once the request to server is complete.
/// </p>
SWIFT_CLASS("_TtC18SF_swift_framework11UserManager")
@interface UserManager : AbstractPacketForwarder
- (nonnull instancetype)initWithStreamManager:(XMPPStreamManager * _Nonnull)streamManager OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Retrieve full user roster from server. The method sends a request to
/// server for user Roster and returns. Upon receiving the the Roster,
/// {@link EventType#ROSTER_RECEIVE} is pushed on to {@link EventBus}.
/// Application can write an {@link EventHandler} for the event type and
/// handle the received Roster.
/// @return true if the request was sent to server; otherwise false
- (BOOL)getFullRosterWithSuccess:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
/// Retrieve user Roster from server. The method blocks until server retruns
/// the response. If server fails to respond in ReplyTimeout time, a
/// TimeoutException will be generated.
/// @param version
/// Roster version; 0 indicates full Roster
/// @return {@link IQ} packet with Roster response
/// @throws TimeoutException
/// if server does not reply in configured time.
- (IQ * _Nullable)getRosterWithVersion:(NSInteger)version error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Add a member to the Roster of logged-in user. The request is executed
/// asynchronosly; supplied { Callback} will be invoked once response
/// arrives. If Server fails to respond in stipulated reply time,
/// { Callback} will be invoked with { TimeoutException}
/// @param jid
/// { JID} of the member who will be added to Roster
/// @param callback
/// { Callback} instance for invocation
/// @return true if the request was sent to server successfully;otherwise
/// false
- (BOOL)addRosterMemberWithJid:(JID * _Nonnull)jid success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
/// Update name of a roster member. The request is executed asynchronosly;
/// supplied { Callback} will be invoked once response arrives. If
/// Server fails to respond in stipulated reply time, { Callback} will
/// be invoked with { TimeoutException}
/// @param jid
/// { JID} of the user who will be added to Roster
/// @param name
/// new name of the member
/// @param callback
/// { Callback} instance for invocation
/// @return true if the request was sent to server successfully;otherwise
/// false
- (IQ * _Null_unspecified)updateRosterMemberNameWithJid:(JID * _Nonnull)jid success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
/// Remove a roster member from logged-in user roster. The request is
/// executed asynchronosly; supplied { Callback} will be invoked once
/// response arrives. If Server fails to respond in stipulated reply time,
/// { Callback} will be invoked with { TimeoutException}
/// @param jid
/// { JID} of the user who will be removed to Roster
/// @param name
/// new name of the member
/// @param callback
/// { Callback} instance for invocation
/// @return true if the request was sent to server successfully;otherwise
/// false
- (IQ * _Null_unspecified)removeRosterMemberWithJid:(JID * _Nonnull)jid contactName:(NSString * _Nonnull)contactName success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
- (void)changeNicknameWithRoomJID:(JID * _Nonnull)roomJID nickName:(NSString * _Nonnull)nickName;
/// Request to join a ChatRoom.
/// @param chatRoomName
/// @param nickName
- (BOOL)joinChatRoomWithRoomJID:(JID * _Nonnull)roomJID nickName:(NSString * _Nonnull)nickName SWIFT_WARN_UNUSED_RESULT;
/// Request to add chat room member. This request should be given by {@link Affiliation#ADMIN} or { Affiliation#OWNER}
/// @param corrId
/// @param roomJID
/// @param userJID
/// @return
- (BOOL)sendAddChatRoomMemberRequestWithCorrId:(NSString * _Nonnull)corrId roomJID:(JID * _Nonnull)roomJID userJID:(JID * _Nonnull)userJID SWIFT_WARN_UNUSED_RESULT;
/// Request to Remove member from chat room. This request should be given by {@link Affiliation#ADMIN} or {@link Affiliation#OWNER}
/// @param corrId
/// @param roomJID
/// @param userJID
/// @return
- (BOOL)sendRemoveChatRoomMemberRequestWithCorrId:(NSString * _Nonnull)corrId roomJID:(JID * _Nonnull)roomJID userJID:(JID * _Nonnull)userJID SWIFT_WARN_UNUSED_RESULT;
/// Request to leave a ChatRoom
/// @param chatRoomName
/// @return true if the request was sent to server successfully otherwise
/// false
- (BOOL)leaveChatRoomWithRoomJID:(JID * _Nonnull)roomJID SWIFT_WARN_UNUSED_RESULT;
/// Send a request to change Chatroom subject. The method simply sends
/// request to server.
/// @param chatRoomName
/// @param subject
/// @return true if the request was sent to server successfully otherwise
/// false
- (BOOL)changeRoomSubjectWithChatRoomName:(NSString * _Nonnull)chatRoomName subject:(NSString * _Nonnull)subject SWIFT_WARN_UNUSED_RESULT;
/// Delete chatroom from server.
/// @param chatRoomName
- (void)deleteChatRoomWithChatRoomName:(NSString * _Nonnull)chatRoomName;
/// Send a request to retreive list of availave chat rooms on server.
/// @param corrId
/// @return true if the request was sent to server successfully otherwise
/// false
- (BOOL)sendGetChatRoomsRequestWithCorrId:(NSString * _Nonnull)corrId SWIFT_WARN_UNUSED_RESULT;
/// Send request to retrieve memeber of a chatroom.
/// @param roomName
/// @return true if the request was sent to server successfully otherwise
/// false
- (BOOL)sendGetChatRoomMembersRequestWithChatRoomname:(NSString * _Nonnull)chatRoomname SWIFT_WARN_UNUSED_RESULT;
/// Resets user password using the supplied user credentials
/// @param userName
/// @param newPassword
/// @param domain
/// @return responseCorrelationId
/// @throws IOException
- (NSString * _Nullable)resetPasswordWithUserName:(NSString * _Nonnull)userName newPassword:(NSString * _Nonnull)newPassword domain:(NSString * _Nonnull)domain error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Deactivates user account from server
- (void)unRegisterUser;
/// Send user registration request to server. The method simply dispatches
/// the request to server. Applications must use the CorrelationId to filter
/// server response.
/// @param user
/// @param email
/// @param contactNo
/// @param pwd
/// @param corrId
/// @return true if the request was sent to server successfully otherwise
/// false
- (BOOL)sendUserRegistrationRequestWithUserName:(NSString * _Nonnull)userName email:(NSString * _Nonnull)email contactNo:(NSString * _Nonnull)contactNo password:(NSString * _Nonnull)password corrId:(NSString * _Nonnull)corrId SWIFT_WARN_UNUSED_RESULT;
/// Send user updation request to server. The method simply dispatches the
/// request to server. Applications must use the CorrelationId to filter
/// server response.
/// @param user
/// @param email
/// @param contactNo
/// @param pwd
/// @param corrId
/// @return true if the request was sent to server successfully otherwise
/// false
- (BOOL)sendUpdateUserRequestWithUserName:(NSString * _Nonnull)userName email:(NSString * _Nonnull)email contactNo:(NSString * _Nonnull)contactNo password:(NSString * _Nonnull)password corrId:(NSString * _Nonnull)corrId SWIFT_WARN_UNUSED_RESULT;
/// Send user registration request to server. The method simply dispatches
/// the request to server. Applications must use the CorrelationId to filter
/// server response.
/// @param user
/// @param email
/// @param contactNo
/// @param pwd
/// @param corrId
/// @return true if the request was sent to server successfully otherwise
/// false
- (BOOL)registerUserWithUserName:(NSString * _Nonnull)userName email:(NSString * _Nonnull)email contactNo:(NSString * _Nonnull)contactNo password:(NSString * _Nonnull)password success:(void (^ _Nonnull)(NSString * _Nonnull))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
/// User logout is protocol level action which simply closes the ongoing
/// stream with server.
- (BOOL)logoutAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)signalNegotiationQueue;
/// close stream is protocol level action which simply closes the ongoing
/// stream with server.
- (void)closeStream;
@end


SWIFT_CLASS_NAMED("UserPresence")
@interface UserPresence : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface UserPresence (SWIFT_EXTENSION(SF_swift_framework))
@property (nonatomic, copy) NSString * _Nullable jid;
@property (nonatomic) int64_t last_update;
@property (nonatomic, copy) NSString * _Nullable mood;
@property (nonatomic, copy) NSString * _Nullable presence;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable uuid;
@end


/// XMPPConnection is a wrapper around TCPConnection. The class
/// does not expose public constructors. SDK users are expected to use
/// ConnectionManager to establish a connection with a remote host.
SWIFT_CLASS("_TtC18SF_swift_framework14XMPPConnection")
@interface XMPPConnection : TCPConnection
- (double)getReplyTimeout SWIFT_WARN_UNUSED_RESULT;
- (void)setReplyTimeoutWithReplyTimeout:(double)replyTimeout;
- (NSString * _Null_unspecified)getId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)closeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (NSInteger)read:(uint8_t * _Nonnull)buffer maxLength:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)write:(uint8_t const * _Nonnull)buffer maxLength:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)toString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework9XMPPError")
@interface XMPPError : XMPPPacket
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithElement:(Element * _Nonnull)element error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getMessage SWIFT_WARN_UNUSED_RESULT;
- (void)setMessageWithMessage:(NSString * _Nonnull)message;
- (NSString * _Null_unspecified)xml SWIFT_WARN_UNUSED_RESULT;
@end



/// XMPPPacketReader reads data from underlying  XMPPConnection
/// and generates  Packet. The class is  Runnable so that it can be
/// run inside a  Thread.
/// By design, developer is expected to attach one XMPPPacketReader to
/// each XMPPConnection created.
SWIFT_CLASS("_TtC18SF_swift_framework16XMPPPacketReader")
@interface XMPPPacketReader : AbstractPacketForwarder <NSStreamDelegate>
- (void)start;
- (void)getInputStream;
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (BOOL)isReading SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasStarted SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shutdown SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isShutdown SWIFT_WARN_UNUSED_RESULT;
- (void)reconnectionStarted;
- (void)connectionEstablished;
- (void)reconnected;
- (void)reconnectionFailed;
- (void)connectionClosed;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework16XMPPPacketWriter")
@interface XMPPPacketWriter : NSObject <NSStreamDelegate>
- (void)start;
- (void)runQueue;
- (void)getOutputStream;
- (BOOL)writeWithData:(NSString * _Null_unspecified)data error:(NSError * _Nullable * _Nullable)error;
- (BOOL)isWritting SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasStarted SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isShutdown SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shutdown SWIFT_WARN_UNUSED_RESULT;
- (void)reconnectionStarted;
- (void)connectionEstablished;
- (void)connectionClosed;
- (void)reconnected;
- (void)reconnectionFailed;
- (BOOL)shutdownNow SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// { XMPPStreamManager} is the central entity around managing communication
/// with server. Stream manager governs the data stream management. It exposes
/// interface to start stream, restart stream, reconnect underlying connection
/// and write data to server.
/// <p>
/// Stream manager is protocol aware; therefore it manages stream context which
/// is shared among { XMPPStreamManager}, { Reader} and { Writer}.
/// </p>
SWIFT_CLASS("_TtC18SF_swift_framework17XMPPStreamManager")
@interface XMPPStreamManager : AbstractPacketForwarder
/// Instantiate a { XMPPStreamManager} object with the given
/// { XMPPConnection}. The assumption is that supplied connection will
/// be already connected to the remote server.
/// @param connection
/// underlying connection
- (nonnull instancetype)initWithConnection:(XMPPConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
- (void)closeStream;
/// Write raw text on the wire. As the text is written directly on to the
/// wire, the caller of the method MUST ensure that the given text adheres to
/// the protocol rules; failure to do so, server is likely to close the
/// stream.
/// <p>
/// The method is supported only for testing purposes. Caller can use this
/// method to send white space characters or complete packet strings.
/// </p>
/// <p>
/// <b>Warning:</b>the text is not scanned for reserved characters by XML
/// specification. The caller MUST encode the text appropriately.
/// </p>
/// @param text
/// to be sent to server
/// @throws UnsupportedEncodingException
/// @throws NetworkException
- (BOOL)writeWithText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
/// Initiates stream manager shutdown sequence. As part of shutdown, Reader
/// thread is stopped, { Connection} is closed and ready state is
/// changed to FALSE.
- (void)shutdown;
@end


/// Represents a user request to an application deployed within server. By
/// design, xmpp requests are very similar to http requests; In fact, xmpp
/// requests are nothing but a http request wrapped inside a
/// {@link abs.ixi.xmpp.packet.Message} packet.
SWIFT_CLASS("_TtC18SF_swift_framework11XmppRequest")
@interface XmppRequest : ApplicationMessage
- (nonnull instancetype)init;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)initWithHeaders:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id headers:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers;
- (JID * _Null_unspecified)getToJID SWIFT_WARN_UNUSED_RESULT;
- (void)setToJIDToJID:(JID * _Nonnull)toJID;
- (NSString * _Nonnull)getSId SWIFT_WARN_UNUSED_RESULT;
- (void)setSIdWithSid:(NSString * _Nonnull)sid;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getEndpoint SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SF_swift_framework12XmppResponse")
@interface XmppResponse : ApplicationMessage
- (nonnull instancetype)init;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)initWithHeaders:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id headers:(NSDictionary<NSString *, NSObject *> * _Nonnull)headers;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
